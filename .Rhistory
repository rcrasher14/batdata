?hello
??hello
norm()
norm(x=3)
?norm
(x1 <- cbind(1, 1:10))
norm(x1)
?normal
??normal
'This is my comment'
install.packages("KernSmooth")
?kernsmooth
??kernsmooth
about(kernsmooth)
packageDescription(KernSmooth)
load(Kernsmooth)
library(kernsmooth)
library(KernSmooth)
install.packages("swirl")
library(swirl)
swirl()
exit()
a <- 1:100
a
b <- a^3
b
plot(a,b)
help(plot)
plot(a,b,type='l;)
plot(a,b,type='l')
plot(a,b,type="l")
plot(a,b,type="b")
plot(a,b,type="p")
plot(a,b,type="l",color=red)
plot(a,b,type="l",color="red")
help(plot)
plot(a,b,type="l",col="red")
plot(a,b,type="l",col="blue")
a
b
c <- cbind(a,b)
c
library()
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
getwd()
x <- 4L
x
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- list(2, "a", "b", TRUE)
x[[1]]
class(x[[1]])
?read
??read
hw1 <- read.csv('hw1_data.csv')
hw1
attributes(hw1)
hw1[1:2,]
numrow(hw1)
nrow(hw1)
hw1[(nrow(hw1)-1):nrow(hw1)]
nrow(hw1)
nrow(hw1)-1
hw1[(nrow(hw1)-1):nrow(hw1),]
hw1[47,]
??complete
complete.cases(hw1)
complete.cases(hw1[,1])
hw1[,1]
hw1[Ozone==NA]
colnames(hw1)
hw1$Ozone
??na
??is.na
is.na(hw1$Ozone)
??anyNA
sum(is.na(hw1))
sum(is.na(hw1$Ozone))
mean(hw1$ozone)
?mean
mean(hw1$Ozone,na.rm=T)
mean(hw1$Ozone,na.rm=F)
mean(hw1$Ozone)
hw1[Ozone>31]
hw1[hw1$Ozone>31]
hw1$Ozone
hw1[[hw1$Ozone>31]]
hw1[[Ozone>31]]
??subset
subset(hw1, Ozone>31)
subset(hw1, Ozone>31,select=Solar.R)
subset(hw1, Ozone>31 & Temp > 90,select=Solar.R)
subset(hw1, Ozone>31 & Temp > 90)
s <- subset(hw1, Ozone>31 & Temp > 90,select=Solar.R)
s
mean(s)
attributes(s)
mean(s$Solar.R)
s2 <- subset(hw1, Month=6,select=Temp)
s2
s2 <- subset(hw1, Month==6)
s2
s2 <- subset(hw1, Month==6,select=Temp)
s2
mean(s2$Temp)
max(subset(hw1$Ozone,Month==5))
max(subset(hw1,Month==5,select=Ozone))
subset(hw1,Month==5,select=Ozone)
View(s)
View(`s2`)
View(hw1)
state
x77
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
x <- c(1,2,3,4)
y<- c(1,4,9,16)
makelm(y~x,c(x,y))
debug()
retrace()
x <<- 2
x
myfun <- function(x1){}
myfun <- function(x1) x1
myfun(3)
myfunc <- function(x1) x <<- x1
myfunc(4)
x <- 2
myfunc(4)
source('~/.active-rstudio-document')
makeVector()
x <- c(1,2,3,3,4,2,3,6)
makeVector(x)
makeVector(c(1,2,2,3,4))
cachemean(x)
cachemean(c(1,2,3))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector()
x <- makeVector()
x$get()
x$getmean
x <- makeVector(c(1,2,3))
x$get()
x$getmean()
x
x$set(c(2,3,4))
x$get()
x$setmean()
x$setmean
x$get
x$get()
x$setmean(3)
x$getmean()
x$setmean(mean(x))
mean(x)
xval <- c(2,3,4,5)
x$set(xval)
x$setmean(mean(xval))
x$get
x$get()
x$getmean()
xmean <- cachmean()
xmean <- cachemean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
x$setmean(NULL)
cachemean(x)
cachemean(x)
y <- matrix(1:9,3,3)
y
solve(y)
ginv(y)
y <- matrix(3:12,3,3)
y <- matrix(4:12,3,3)
solve(y)
yinv <- solve(y)
y <- diag(3)
y
solve(y)
inv
?inv
??inv
inv()
y <- identity(4)
x <- makeCacheMatrix(y)
source('~/Online Classes/Data Science/02 R Programming/Exercise2/ProgrammingAssignment2/cachematrix.R')
x <- makeCacheMatrix(y)
x$get()
y
y <- diag(4)
x <- makeCacheMatrix(y)
x$get()
cacheSolve(x)
source('~/Online Classes/Data Science/02 R Programming/Exercise2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
y <- diag(4)
x <- makeCacheMatrix(y)
source('~/Online Classes/Data Science/02 R Programming/Exercise2/ProgrammingAssignment2/cachematrix.R')
x <- makeCacheMatrix(y)
x$getinv()
cacheSolve(x)
cacheSolve(x)
library(datasets)
datasets(iris)
data(iris)
?iris
mean(sepal.length)
mean(iris$sepal.length)
iris$sepal.length
iris$Sepal.Length
mean(iris$Sepal.Length)
str(iris)
iris
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
data(mtcars)
?mtcars
str(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
avghp <- tapply(mtcars$hp, mtcars$cyl, mean)
avhp
avghp
avghp$4 - avghp$8
avghp[2,1]-avghp[2,3]
avghp
209.21429 - 82.62626
debug(ls)
ls()
q
exit
quit
quit()
exit()
??browse
quit()
set.seed(1)
rpois(5, 2)
?rnorm
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot(y)
install.packages(c("nnet", "neuralnet"))
??neural
??transpose
x <- c(0,0; 1,0; 1,1; 0,1)
x <- cbind(c(0,0), c(1,1))
x
x <- cbind(c(0,0), c(1,0),c(1,1),c(0,1))
V <- cbind(rrand(3))
rand(3)
??random
V <- cbind(c(.01,.23),c(.98,.4))
V
?rand
t(V)*x
x
t(V)*x[,1]
Y <- cbind(1,0,1,0)
y
Y
total <- rbind(x,Y)
total
clear(total)
View(total)
View(V)
View(Y)
View(x)
dim(x)
dim(Y)
dim(V)
x*V
t(V)*x
source('~/VTech Research/scripts/setup.R')
data <- read.csv(./data/"bdd testing all.csv") # import data from .csv derived from bdd
data <- read.csv("./data/bdd testing all.csv") # import data from .csv derived from bdd
data <- read.csv("../data/bdd testing all.csv") # import data from .csv derived from bdd
data <- read.csv("~/data/bdd testing all.csv") # import data from .csv derived from bdd
data <- read.csv("/data/bdd testing all.csv") # import data from .csv derived from bdd
setwd("~/VTech Research/scripts")
data <- read.csv("~/data/bdd testing all.csv") # import data from .csv derived from bdd
data <- read.csv("./data/bdd testing all.csv") # import data from .csv derived from bdd
data <- read.csv("../data/bdd testing all.csv") # import data from .csv derived from bdd
source('~/VTech Research/scripts/setup.R')
source('vtech_functions.r')
View(distance_to_one)
library(plyr)
library(reshape2)
# Data without the samp.occ variable
testdata <- subset(data, select=-samp.occ)
# Melt the data into long format
mtestdata <- melt(testdata, id.vars = c("instance", "date","area"))
# Create za matrixwith dimensions [a,b,c]
# where a=date, b=instance,c=species
za <- acast(mtestdata, date ~ instance ~ variable)
### Now create a list with a table for each species########################
species_tables <- lapply(species, function(x) as.data.frame(za[,,x]))
names(species_tables) <- species  # add the species names to the list
species_dist_ones <- lapply(species_tables,list_distance_to_one)
head(species_dist_ones$laci)
species_dist_ones <- lapply(species_tables,function(x) list_distance_to_one(as.numeric(na.omit(x))))
distance_to_one <- function(input){
input <- as.numeric(na.omit(input))
input_ones <- which(input==1)
input_ones <- c(input_ones,length(input))
runs <- c(input_ones[1],diff(input_ones))
input_ones[length(input_ones)] <- input_ones[length(input_ones)] + 1
d <- rep(input_ones,runs)
ind <- c(1:length(input))
dist_to_one <- d - ind
return(dist_to_one)
}
species_dist_ones <- lapply(species_tables,list_distance_to_one)
species_dist_ones$laci$`E-FO11-ACT`
species_tables$labo$`E-FO11-ACT`
hist(unlist(species_dist_ones$labo))
boxplot(unlist(species_dist_ones$labo))
boxplot(species_dist_ones$labo)
